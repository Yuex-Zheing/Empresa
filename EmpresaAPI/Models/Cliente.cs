/*
 * Cuentas
 *
 * Operaciones con Cuentas
 *
 * OpenAPI spec version: 1.0
 * Contact: wquimis@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace EmpresaAPI.Models
{ 
    /// <summary>
    /// Modelo Cliente
    /// </summary>
    [DataContract]
    public partial class Cliente : IEquatable<Cliente>
    { 
        /// <summary>
        /// Gets or Sets IdCliente
        /// </summary>

        [DataMember(Name="idCliente")]
        public int? IdCliente { get; set; }

        /// <summary>
        /// Gets or Sets Nombres
        /// </summary>
        [Required]

        [MaxLength(100)]
        [DataMember(Name="nombres")]
        public string Nombres { get; set; }

        /// <summary>
        /// Gets or Sets Genero
        /// </summary>

        [MaxLength(1)]
        [DataMember(Name="genero")]
        public string Genero { get; set; }

        /// <summary>
        /// Gets or Sets Edad
        /// </summary>

        [Range(1, 150)]
        [DataMember(Name="edad")]
        public int? Edad { get; set; }

        /// <summary>
        /// Gets or Sets Identificacion
        /// </summary>
        [Required]

        [MaxLength(10)]
        [DataMember(Name="identificacion")]
        public string Identificacion { get; set; }

        /// <summary>
        /// Gets or Sets Direccion
        /// </summary>
        [Required]

        [MaxLength(200)]
        [DataMember(Name="direccion")]
        public string Direccion { get; set; }

        /// <summary>
        /// Gets or Sets Telefono
        /// </summary>
        [Required]

        [MaxLength(10)]
        [DataMember(Name="telefono")]
        public string Telefono { get; set; }

        /// <summary>
        /// Gets or Sets Clave
        /// </summary>
        [Required]

        [DataMember(Name="clave")]
        public string Clave { get; set; }

        /// <summary>
        /// Gets or Sets Estado
        /// </summary>

        [MaxLength(1)]
        [DataMember(Name="estado")]
        public string Estado { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cliente {\n");
            sb.Append("  IdCliente: ").Append(IdCliente).Append("\n");
            sb.Append("  Nombres: ").Append(Nombres).Append("\n");
            sb.Append("  Genero: ").Append(Genero).Append("\n");
            sb.Append("  Edad: ").Append(Edad).Append("\n");
            sb.Append("  Identificacion: ").Append(Identificacion).Append("\n");
            sb.Append("  Direccion: ").Append(Direccion).Append("\n");
            sb.Append("  Telefono: ").Append(Telefono).Append("\n");
            sb.Append("  Clave: ").Append(Clave).Append("\n");
            sb.Append("  Estado: ").Append(Estado).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Cliente)obj);
        }

        /// <summary>
        /// Returns true if Cliente instances are equal
        /// </summary>
        /// <param name="other">Instance of Cliente to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cliente other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IdCliente == other.IdCliente ||
                    IdCliente != null &&
                    IdCliente.Equals(other.IdCliente)
                ) && 
                (
                    Nombres == other.Nombres ||
                    Nombres != null &&
                    Nombres.Equals(other.Nombres)
                ) && 
                (
                    Genero == other.Genero ||
                    Genero != null &&
                    Genero.Equals(other.Genero)
                ) && 
                (
                    Edad == other.Edad ||
                    Edad != null &&
                    Edad.Equals(other.Edad)
                ) && 
                (
                    Identificacion == other.Identificacion ||
                    Identificacion != null &&
                    Identificacion.Equals(other.Identificacion)
                ) && 
                (
                    Direccion == other.Direccion ||
                    Direccion != null &&
                    Direccion.Equals(other.Direccion)
                ) && 
                (
                    Telefono == other.Telefono ||
                    Telefono != null &&
                    Telefono.Equals(other.Telefono)
                ) && 
                (
                    Clave == other.Clave ||
                    Clave != null &&
                    Clave.Equals(other.Clave)
                ) && 
                (
                    Estado == other.Estado ||
                    Estado != null &&
                    Estado.Equals(other.Estado)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IdCliente != null)
                    hashCode = hashCode * 59 + IdCliente.GetHashCode();
                    if (Nombres != null)
                    hashCode = hashCode * 59 + Nombres.GetHashCode();
                    if (Genero != null)
                    hashCode = hashCode * 59 + Genero.GetHashCode();
                    if (Edad != null)
                    hashCode = hashCode * 59 + Edad.GetHashCode();
                    if (Identificacion != null)
                    hashCode = hashCode * 59 + Identificacion.GetHashCode();
                    if (Direccion != null)
                    hashCode = hashCode * 59 + Direccion.GetHashCode();
                    if (Telefono != null)
                    hashCode = hashCode * 59 + Telefono.GetHashCode();
                    if (Clave != null)
                    hashCode = hashCode * 59 + Clave.GetHashCode();
                    if (Estado != null)
                    hashCode = hashCode * 59 + Estado.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Cliente left, Cliente right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Cliente left, Cliente right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
