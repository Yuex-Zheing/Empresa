/*
 * Cuentas
 *
 * Operaciones con Cuentas
 *
 * OpenAPI spec version: 1.0
 * Contact: wquimis@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace EmpresaAPI.Models
{ 
    /// <summary>
    /// Modelo de cuenta
    /// </summary>
    [DataContract]
    public partial class Cuenta : IEquatable<Cuenta>
    { 
        /// <summary>
        /// Gets or Sets IdCuenta
        /// </summary>

        [DataMember(Name="idCuenta")]
        public int? IdCuenta { get; set; }

        /// <summary>
        /// Gets or Sets IdCliente
        /// </summary>
        [Required]

        [DataMember(Name="idCliente")]
        public int? IdCliente { get; set; }

        /// <summary>
        /// Gets or Sets NumeroCuenta
        /// </summary>
        [Required]

        [StringLength(10, MinimumLength=6)]
        [DataMember(Name="numeroCuenta")]
        public string NumeroCuenta { get; set; }

        /// <summary>
        /// Gets or Sets TipoCuenta
        /// </summary>
        [Required]

        [MaxLength(1)]
        [DataMember(Name="tipoCuenta")]
        public string TipoCuenta { get; set; }

        /// <summary>
        /// Gets or Sets SaldoInicial
        /// </summary>
        [Required]

        [Range(-999999999999, 999999999994)]
        [DataMember(Name="saldoInicial")]
        public double? SaldoInicial { get; set; }

        /// <summary>
        /// Gets or Sets Estado
        /// </summary>

        [MaxLength(1)]
        [DataMember(Name="estado")]
        public string Estado { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cuenta {\n");
            sb.Append("  IdCuenta: ").Append(IdCuenta).Append("\n");
            sb.Append("  IdCliente: ").Append(IdCliente).Append("\n");
            sb.Append("  NumeroCuenta: ").Append(NumeroCuenta).Append("\n");
            sb.Append("  TipoCuenta: ").Append(TipoCuenta).Append("\n");
            sb.Append("  SaldoInicial: ").Append(SaldoInicial).Append("\n");
            sb.Append("  Estado: ").Append(Estado).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Cuenta)obj);
        }

        /// <summary>
        /// Returns true if Cuenta instances are equal
        /// </summary>
        /// <param name="other">Instance of Cuenta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cuenta other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IdCuenta == other.IdCuenta ||
                    IdCuenta != null &&
                    IdCuenta.Equals(other.IdCuenta)
                ) && 
                (
                    IdCliente == other.IdCliente ||
                    IdCliente != null &&
                    IdCliente.Equals(other.IdCliente)
                ) && 
                (
                    NumeroCuenta == other.NumeroCuenta ||
                    NumeroCuenta != null &&
                    NumeroCuenta.Equals(other.NumeroCuenta)
                ) && 
                (
                    TipoCuenta == other.TipoCuenta ||
                    TipoCuenta != null &&
                    TipoCuenta.Equals(other.TipoCuenta)
                ) && 
                (
                    SaldoInicial == other.SaldoInicial ||
                    SaldoInicial != null &&
                    SaldoInicial.Equals(other.SaldoInicial)
                ) && 
                (
                    Estado == other.Estado ||
                    Estado != null &&
                    Estado.Equals(other.Estado)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IdCuenta != null)
                    hashCode = hashCode * 59 + IdCuenta.GetHashCode();
                    if (IdCliente != null)
                    hashCode = hashCode * 59 + IdCliente.GetHashCode();
                    if (NumeroCuenta != null)
                    hashCode = hashCode * 59 + NumeroCuenta.GetHashCode();
                    if (TipoCuenta != null)
                    hashCode = hashCode * 59 + TipoCuenta.GetHashCode();
                    if (SaldoInicial != null)
                    hashCode = hashCode * 59 + SaldoInicial.GetHashCode();
                    if (Estado != null)
                    hashCode = hashCode * 59 + Estado.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Cuenta left, Cuenta right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Cuenta left, Cuenta right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
