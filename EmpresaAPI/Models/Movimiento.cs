/*
 * Cuentas
 *
 * Operaciones con Cuentas
 *
 * OpenAPI spec version: 1.0
 * Contact: wquimis@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace EmpresaAPI.Models
{ 
    /// <summary>
    /// Modelo Movimientos financieros
    /// </summary>
    [DataContract]
    public partial class Movimiento : IEquatable<Movimiento>
    { 
        /// <summary>
        /// Gets or Sets IdMovimiento
        /// </summary>

        [DataMember(Name="idMovimiento")]
        public int? IdMovimiento { get; set; }

        /// <summary>
        /// Gets or Sets IdCuenta
        /// </summary>
        [Required]

        [DataMember(Name="idCuenta")]
        public int? IdCuenta { get; set; }

        /// <summary>
        /// Gets or Sets Fecha
        /// </summary>

        [DataMember(Name="fecha")]
        public DateTime? Fecha { get; set; }

        /// <summary>
        /// Gets or Sets TipoMovimiento
        /// </summary>
        [Required]

        [MaxLength(1)]
        [DataMember(Name="tipoMovimiento")]
        public string TipoMovimiento { get; set; }

        /// <summary>
        /// Gets or Sets Valor
        /// </summary>
        [Required]

        [Range(-999999999999, 999999999999)]
        [DataMember(Name="valor")]
        public double? Valor { get; set; }

        /// <summary>
        /// Gets or Sets Saldo
        /// </summary>

        [Range(-999999999999, 999999999999)]
        [DataMember(Name="saldo")]
        public double? Saldo { get; set; }

        /// <summary>
        /// Gets or Sets MovDescripcion
        /// </summary>

        [MaxLength(200)]
        [DataMember(Name="movDescripcion")]
        public string MovDescripcion { get; set; }

        /// <summary>
        /// Gets or Sets Estado
        /// </summary>
        [Required]

        [MaxLength(1)]
        [DataMember(Name="Estado")]
        public string Estado { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Movimiento {\n");
            sb.Append("  IdMovimiento: ").Append(IdMovimiento).Append("\n");
            sb.Append("  IdCuenta: ").Append(IdCuenta).Append("\n");
            sb.Append("  Fecha: ").Append(Fecha).Append("\n");
            sb.Append("  TipoMovimiento: ").Append(TipoMovimiento).Append("\n");
            sb.Append("  Valor: ").Append(Valor).Append("\n");
            sb.Append("  Saldo: ").Append(Saldo).Append("\n");
            sb.Append("  MovDescripcion: ").Append(MovDescripcion).Append("\n");
            sb.Append("  Estado: ").Append(Estado).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Movimiento)obj);
        }

        /// <summary>
        /// Returns true if Movimiento instances are equal
        /// </summary>
        /// <param name="other">Instance of Movimiento to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Movimiento other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IdMovimiento == other.IdMovimiento ||
                    IdMovimiento != null &&
                    IdMovimiento.Equals(other.IdMovimiento)
                ) && 
                (
                    IdCuenta == other.IdCuenta ||
                    IdCuenta != null &&
                    IdCuenta.Equals(other.IdCuenta)
                ) && 
                (
                    Fecha == other.Fecha ||
                    Fecha != null &&
                    Fecha.Equals(other.Fecha)
                ) && 
                (
                    TipoMovimiento == other.TipoMovimiento ||
                    TipoMovimiento != null &&
                    TipoMovimiento.Equals(other.TipoMovimiento)
                ) && 
                (
                    Valor == other.Valor ||
                    Valor != null &&
                    Valor.Equals(other.Valor)
                ) && 
                (
                    Saldo == other.Saldo ||
                    Saldo != null &&
                    Saldo.Equals(other.Saldo)
                ) && 
                (
                    MovDescripcion == other.MovDescripcion ||
                    MovDescripcion != null &&
                    MovDescripcion.Equals(other.MovDescripcion)
                ) && 
                (
                    Estado == other.Estado ||
                    Estado != null &&
                    Estado.Equals(other.Estado)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IdMovimiento != null)
                    hashCode = hashCode * 59 + IdMovimiento.GetHashCode();
                    if (IdCuenta != null)
                    hashCode = hashCode * 59 + IdCuenta.GetHashCode();
                    if (Fecha != null)
                    hashCode = hashCode * 59 + Fecha.GetHashCode();
                    if (TipoMovimiento != null)
                    hashCode = hashCode * 59 + TipoMovimiento.GetHashCode();
                    if (Valor != null)
                    hashCode = hashCode * 59 + Valor.GetHashCode();
                    if (Saldo != null)
                    hashCode = hashCode * 59 + Saldo.GetHashCode();
                    if (MovDescripcion != null)
                    hashCode = hashCode * 59 + MovDescripcion.GetHashCode();
                    if (Estado != null)
                    hashCode = hashCode * 59 + Estado.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Movimiento left, Movimiento right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Movimiento left, Movimiento right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
